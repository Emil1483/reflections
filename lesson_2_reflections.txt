What happens when you initialize a repository? Why do you need to do it?
I guess I have to create a commit to start tracking my files. When I initialize a repository, it creates a file called .git that stores all the commits. It also says (master #) after Emil in the prompt.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is where I put the files that I want to be in a commit. It acts on the reposetory which is all inside of the working directory. This is where all the files are stored.

How can you use the staging area to make sure you have one commit per logical change?
I can use git diff --staged to find out what changes is between the most recent commit and the staging area. This way, I can check if doing a commit will hace one logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
If I wanted to add some dangerous or experimental feuture, I could do that without ruining anything. I could disregard any changes that I do not want. If I wanted to add a long feuture to some softwere, I could do that and add the feurure to the master when I am done.

How do the diagrams help you visualize the branch structure?
They help me by showing me where each branch are and how they are connected like a tree.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result is that the code from both of the brances combine in one huge commit. 